#
# NOTE: THIS DOCKERFILE IS GENERATED VIA "update.sh"
#
# PLEASE DO NOT EDIT IT DIRECTLY.
#
FROM alpine:3.6
#
# 镜像基于alpine3.6，alpine构建的镜像相比Ubuntu，Centos要小很多，大约只有5M
#

# dependencies required for running "phpize"
# these get automatically installed and removed by "docker-php-ext-*" (unless they're already installed)
ENV PHPIZE_DEPS \
		autoconf \
		dpkg-dev dpkg \
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		pkgconf \
		re2c
#
# 一些检查，编译，安装需要的命令以及依赖
# gcc g++ make autoconf 是php检查，编译，安装需要用到命令
# re2c 修改php词法解析器需要用到的开发包（PHP在最开始的词法解析器是使用的是flex，后来PHP的改为使用re2c）
# autoconf 是用phpize从config.m4文件中提取检查（configure）、编译（makefile）文件
# dpkg 是一个Debian软件包管理器，功能与rpm相似，同样被用于安装、卸载包
# pkgconf  pkg-config 维护了一个保存各个代码库的路径的数据库
# libc 泛指C函数库，由C开发包的函数库


# persistent / runtime deps
RUN apk add --no-cache --virtual .persistent-deps \
		ca-certificates \
		curl \
		tar \
		xz \
# https://github.com/docker-library/php/issues/494
		libressl

# ensure www-data user exists
RUN set -x \
	&& addgroup -g 82 -S www-data \
	&& adduser -u 82 -D -S -G www-data www-data
# 82 is the standard uid/gid for "www-data" in Alpine
# http://git.alpinelinux.org/cgit/aports/tree/main/apache2/apache2.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/lighttpd/lighttpd.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/nginx-initscripts/nginx-initscripts.pre-install?h=v3.3.2

#
# 在alpine系统中使用apk 安装apache，会在系统用生成一个 gid为82、组名为www-data的组。生成一个用户，名为www-data、附加在www-data组中，
# 用户编号如果不指定，那么就是由系统生成，通常是在之前的uid+1操作，docker容器中角色不会跟实际系统中有那么多，所以这里可以添加一个用户并且指定uid
#


ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

ENV GPG_KEYS 1729F83938DA44E27BA0F4D3DBDB397470D12172 B1B44D8F021E4E2D6021E995DC9FF8D3EE5AF27F

ENV PHP_VERSION 7.2.5
ENV PHP_URL="https://secure.php.net/get/php-7.2.5.tar.xz/from/this/mirror" PHP_ASC_URL="https://secure.php.net/get/php-7.2.5.tar.xz.asc/from/this/mirror"
ENV PHP_SHA256="7916b1bd148ddfd46d7f8f9a517d4b09cd8a8ad9248734e7c8dd91ef17057a88" PHP_MD5=""
#
# https://secure.php.net/get/php-7.2.4.tar.xz/from/this/mirror 这是下载的地址，在php官网下载页面可以选择不同国家的镜像
# 比如中国的下载镜像来源是 https://cn2.php.net/get/php-7.2.4.tar.xz/from/this/mirror，变化的只是二级域名
# 请注意/from/this/mirror和/from/a/mirror的区别，/from/a/mirror需要选择一个镜像
# 我曾经以为是不同国家的php版本会有所不同，所以需要根据国家选择，手动滑稽，php版本区分有5.x、7.x，同一版本下区分linux、window，window下区分线性安全，非线性安全和32、64位
#
# 使用这种下载方式会出现302错误，响应location是http://php.net/distributions/php-xxx.tar.xz
# 也可以使用http://php.net/distributions/php-xxx.tar.xz进行下载
# 如果出现链接失败的情况，可以重新安装wget，测试中，遇到下载的问题
#
# 官方的.bz2、.gz、.xz的压缩包中，xz的压缩包最小，xz也是一个命令，用来解压xz包。使用tar Jxf也能解压
#
# 在linux下载的时候需要指定文件名，不指定的话，下载的只是一个普通的mirror文件
# https://secure.php.net/get/php-7.2.4.tar.xz.asc/from/this/mirror下载秘钥，用于GPG效验
#
# 下载php源码包并不区分32或者64位，只有windows版本分为32、64、线性安全、非线性安全版本
#

RUN set -xe; \
	\
	apk add --no-cache --virtual .fetch-deps \
		gnupg \
	; \
	\
	mkdir -p /usr/src; \
	cd /usr/src; \
	\
	wget -O php.tar.xz "$PHP_URL"; \
	\
	if [ -n "$PHP_SHA256" ]; then \
		echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -; \
	fi; \
	if [ -n "$PHP_MD5" ]; then \
		echo "$PHP_MD5 *php.tar.xz" | md5sum -c -; \
	fi; \
	\
	if [ -n "$PHP_ASC_URL" ]; then \
		wget -O php.tar.xz.asc "$PHP_ASC_URL"; \
		export GNUPGHOME="$(mktemp -d)"; \
		for key in $GPG_KEYS; do \
			gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
		done; \
		gpg --batch --verify php.tar.xz.asc php.tar.xz; \
		rm -rf "$GNUPGHOME"; \
	fi; \
	\
	apk del .fetch-deps

#
# 上面这些操作是为了检查php包的完整性，在实际操作中，由于各种原因可能会出现丢包的情况，所以要检查包的完整性
# sha256和md5的值都可以在php官网查询的到
# sha256sum使用，常规使用 创建一个文件，文件中包含sha256的值和要检验包的，如文件名称为checkfile，文件内容：7916b1bd148ddfd46d7f8f9a517d4b09cd8a8ad9248734e7c8dd91ef17057a88 php.tar.xz
# sha256sum -c checkfile 请注意文件中不要有多余的行，允许多行，sha256和要检验的文件一一对应，如果有一个验证不通过执行结果非0，即echo $? 输出的是1
# 文件名称需要带星号,附：centos6.9下测试需要带星号 *php.tar.xz 、 centos7.4测试不需要带星号
#
# gpg验证：GNUPGHOME指定钥匙环生成路径
# gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; 导入公钥，用户id或者指纹都行
# 签名验证，需要下载数字证书，使用Ascii显示，需下载下载.asc的文件
# gpg参考：http://www.ruanyifeng.com/blog/2013/07/gpg.html

COPY docker-php-source /usr/local/bin/
# docker-php-source是一个shell 放到/usr/local/bin/下，docker-php-source就是一个命令，可以直接使用
#
# docker-php-source命令的作用有两个，1.解压php源码包到/usr/src/php中，2. 删除/usr/src/php下的源码包
#
# 请不要随意修改 docker-php-source 中的dir变量，如果需要同步修改下面的 cd /usr/src/php
#

RUN set -xe \
	&& apk add --no-cache --virtual .build-deps \
	    # --no-cache 顾名思义，不使用缓存
	    # --virtual NAME  查看add帮助可以看到 --virtual NAME的解释：
	    # <start>
	    # Instead of adding all the packages to 'world',  用一个单词去替代添加的所有包
	    # create a new virtual package with the listed dependencies and add that to 'world';  创建一个新的虚拟包和依赖列表一块添加到这个单词
	    # the actions of the command are easily reverted by deleting the virtual package 通过删除虚拟包，命令的动作很容易恢复。
	    # <end>
	    # 可以理解为用一个变量替代下面的安装包，这样就可以很方便的批量关系，比如删除（下面有用到，一次性删除，删除是为了控制构建镜像大小）
	    #

		$PHPIZE_DEPS \
		coreutils \
		curl-dev \
		libedit-dev \
		libressl-dev \
		libsodium-dev \
		libxml2-dev \
		sqlite-dev \
	\
	&& export CFLAGS="$PHP_CFLAGS" \
		CPPFLAGS="$PHP_CPPFLAGS" \
		LDFLAGS="$PHP_LDFLAGS" \
	   # CFLAGS（或CXXFLAGS for C ++）是用于编译器的，而CPPFLAGS是由预处理器使用的
	   # 这些参数都是编译用的，最最最底层的东西，不多做研究

	&& docker-php-source extract \
	# 解压php源码压缩包到 /usr/src/php

	&& cd /usr/src/php \

	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	# 获取构建机器的GNU系统类型
	# ubuntu 由cpu和system分隔 如：i386-linux-gnu，sparc-linux-gnu，i386-gnu，x86_64-netbsd，x86_64-linux-gnu
	# 参考：https://linux.die.net/man/1/dpkg-architecture

	&& ./configure \
		--build="$gnuArch" \
		# --build 是php交叉编译选项
		# 交叉编译：编译器会生成与运行编译器的代码相同的系统上运行的代码
		# 参考：https://www.airs.com/ian/configure/

		--with-config-file-path="$PHP_INI_DIR" \
		--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		\
		--disable-cgi \
		\
# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
		--enable-ftp \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
		--enable-mbstring \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
		--enable-mysqlnd \
# https://wiki.php.net/rfc/libsodium
		--with-sodium=shared \
		\
		--with-curl \
		--with-libedit \
		--with-openssl \
		--with-zlib \
		\
# bundled pcre does not support JIT on s390x
# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT
		$(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit') \
		\
		$PHP_EXTRA_CONFIGURE_ARGS \
	&& make -j "$(nproc)" \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \
	&& make clean \
	&& cd / \
	&& docker-php-source delete \
	\
	&& runDeps="$( \
		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)" \
	&& apk add --no-cache --virtual .php-rundeps $runDeps \
	\
	&& apk del .build-deps \
	\
# https://github.com/docker-library/php/issues/443
	&& pecl update-channels \
	&& rm -rf /tmp/pear ~/.pearrc

COPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/

# sodium was built as a shared module (so that it can be replaced later if so desired), so let's enable it too (https://github.com/docker-library/php/issues/598)
RUN docker-php-ext-enable sodium

ENTRYPOINT ["docker-php-entrypoint"]
##<autogenerated>##
WORKDIR /var/www/html

RUN set -ex \
	&& cd /usr/local/etc \
	&& if [ -d php-fpm.d ]; then \
		# for some reason, upstream's php-fpm.conf.default has "include=NONE/etc/php-fpm.d/*.conf"
		sed 's!=NONE/!=!g' php-fpm.conf.default | tee php-fpm.conf > /dev/null; \
		cp php-fpm.d/www.conf.default php-fpm.d/www.conf; \
	else \
		# PHP 5.x doesn't use "include=" by default, so we'll create our own simple config that mimics PHP 7+ for consistency
		mkdir php-fpm.d; \
		cp php-fpm.conf.default php-fpm.d/www.conf; \
		{ \
			echo '[global]'; \
			echo 'include=etc/php-fpm.d/*.conf'; \
		} | tee php-fpm.conf; \
	fi \
	&& { \
		echo '[global]'; \
		echo 'error_log = /proc/self/fd/2'; \
		echo; \
		echo '[www]'; \
		echo '; if we send this to /proc/self/fd/1, it never appears'; \
		echo 'access.log = /proc/self/fd/2'; \
		echo; \
		echo 'clear_env = no'; \
		echo; \
		echo '; Ensure worker stdout and stderr are sent to the main error log.'; \
		echo 'catch_workers_output = yes'; \
	} | tee php-fpm.d/docker.conf \
	&& { \
		echo '[global]'; \
		echo 'daemonize = no'; \
		echo; \
		echo '[www]'; \
		echo 'listen = 9000'; \
	} | tee php-fpm.d/zz-docker.conf

EXPOSE 9000
CMD ["php-fpm"]
##</autogenerated>##
